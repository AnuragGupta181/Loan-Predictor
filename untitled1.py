# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LRZDLnkscU7CFw5fkxo8E65vpT_tkH3D

# **Loan Approval Modal Training**

---

# All imports
"""

# importing all libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

"""# Analysing the data frame"""

# checking if the dataset is their in the google colab or not
!pwd
!ls -lh

# uploading dataset in the google colab

from google.colab import files
files.upload()

# importing dataset in the google colab as df

df = pd.read_csv("data.csv")

df.head()

"""# Making Data ready for Training"""

# getting data whose Loan status, LoanAmount, Loan_Amount_Term is not not null and apply other operations on that only that rows.
df_train = df.dropna(subset=['Loan_Status','LoanAmount','Loan_Amount_Term']).copy()

#remove all the dublicates rows
df_train.drop_duplicates(inplace = True)

# remove loan id column
df_train.drop('Loan_ID', axis=1, inplace=True)


df_hold = df[df['Loan_Status'].isna()].copy()

# Convert '3+' to 3 in Dependents
df_train['Dependents'] = df_train['Dependents'].replace('3+', '3')
df_train.fillna({"Dependents": 0}, inplace=True)
df_train['Dependents'] = df_train['Dependents'].astype(int)

# Convert Loan_Status 'Y'/'N' to 1/0
df_train['Loan_Status'] = df_train['Loan_Status'].map({'Y': 1, 'N': 0})
df_train.fillna({"Loan_Status": -1}, inplace=True)
df_train['Loan_Status'] = df_train['Loan_Status'].astype(int)

# convert gender if male-1 & female-0
df_train['Gender'] = df_train['Gender'].map({'Male': 1, 'Female': 0})
df_train.fillna({"Gender": 0}, inplace=True)
df_train['Gender'] = df_train['Gender'].astype(int)

# convert Self_Employed if yes-1 & no-0
df_train['Self_Employed'] = df_train['Self_Employed'].map({'Yes': 1, 'No': 0})
df_train.fillna({"Self_Employed": 0}, inplace=True)
df_train['Self_Employed'] = df_train['Self_Employed'].astype(int)

# convert Property_Area if 'Rural': 0, 'Semiurban': 1, 'Urban': 2
df_train['Property_Area'] = df_train['Property_Area'].map({'Rural': 0, 'Semiurban': 1, 'Urban': 2})
df_train.fillna({"Property_Area": 1}, inplace=True)
df_train['Property_Area'] = df_train['Property_Area'].astype(int)

# convert Education if Graduate-1 & Not Graduate-0
df_train['Education'] = df_train['Education'].map({'Graduate': 1, 'Not Graduate': 0})
df_train.fillna({"Education": 0}, inplace=True)
df_train['Education'] = df_train['Education'].astype(int)

# convert Married if yes-1 & no-0
df_train['Married'] = df_train['Married'].map({'Yes': 1, 'No': 0})
df_train.fillna({"Married": 0}, inplace=True)
df_train['Married'] = df_train['Married'].astype(int)

# If Credit_History is null keep in int 0/1
df_train.fillna({"Credit_History": 0}, inplace=True)
df_train['Credit_History'] = df_train['Credit_History'].astype(int)

# changing data type to int to save the space
df_train['LoanAmount'] = df_train['LoanAmount'].fillna(0).astype(int)
df_train['Loan_Amount_Term'] = df_train['Loan_Amount_Term'].fillna(0).astype(int)
df_train['CoapplicantIncome'] = df_train['CoapplicantIncome'].fillna(0).astype(int)

df_train.head()

"""# Performing EDA"""

plt.figure(figsize=(10,8))
corr = df_train.corr()
plt.imshow(corr, cmap="coolwarm", interpolation="nearest")
plt.colorbar()
plt.xticks(range(len(corr)), corr.columns, rotation=90)
plt.yticks(range(len(corr)), corr.columns)
plt.title("Correlation Heatmap")
plt.show()

plt.pie(df_train['Loan_Status'].value_counts(), labels=['Approved','Not Approved'], autopct='%1.1f%%', colors=['lightgreen','salmon'])
plt.title("Loan Status Distribution")
plt.show()

pd.crosstab(df_train['Gender'].map({0: "Female", 1: "Male"}), df_train['Loan_Status']).plot(
    kind="bar", stacked=True, color=['salmon','lightgreen'])
plt.title("Gender vs Loan Status")
plt.xlabel("Gender")
plt.ylabel("Count")
plt.legend(["Not Approved","Approved"])
plt.show()

pd.crosstab(df_train['Married'].map({0: "Single", 1: "Married"}), df_train['Loan_Status']).plot(
    kind="bar", figsize=(6,4), stacked=True, color=['salmon','lightgreen'])
plt.title("Married vs Loan Status")
plt.xlabel("Martial Status")
plt.ylabel("Count")
plt.legend(["Not Approved","Approved"])
plt.show()

pd.crosstab(df_train['Property_Area'].map({0: "Rural", 1: "Semiurban", 2: "Urban"}), df_train['Loan_Status']).plot(
    kind="bar", figsize=(6,4), stacked=True, color=['salmon','lightgreen'])
plt.title("Property Area vs Loan Status")
plt.xlabel("Property Area")
plt.ylabel("Count")
plt.legend(["Not Approved","Approved"])
plt.show()

pd.crosstab(df_train['Credit_History'].map({0: "No", 1: "Yes"}), df_train['Loan_Status']).plot(
    kind="bar", figsize=(6,4), stacked=True, color=['salmon','lightgreen'])
plt.title("Credit History vs Loan Status")
plt.xlabel("Credit History")
plt.ylabel("Count")
plt.legend(["Not Approved","Approved"])
plt.show()

plt.figure(figsize=(8,5))
plt.hist(df_train['ApplicantIncome'], bins=30, color='salmon', edgecolor='black')
plt.title("Distribution of Applicant Income")
plt.xlabel("Applicant Income")
plt.ylabel("Frequency")
plt.show()

"""# Model Training"""

# Features (all except Loan_Status)
X = df_train.drop("Loan_Status", axis=1)

# Target (Loan_Status)
y = df_train["Loan_Status"]

# Train-Test Split

X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=42, stratify=y )

# Feature Scaling (for numeric columns)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Training a Model with Logistic Regression

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Training a Model with Decision Tree

dt_model = DecisionTreeClassifier(criterion="entropy", max_depth=5, random_state=42)
dt_model.fit(X_train, y_train)
y_pred_dt = dt_model.predict(X_test)

print("Decision Tree Accuracy:", accuracy_score(y_test, y_pred_dt))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred_dt))
print("\nClassification Report:\n", classification_report(y_test, y_pred_dt))

# Comparing Accuracies

print("Logistic Regression Accuracy:", accuracy_score(y_test, y_pred))
print("Decision Tree Accuracy:", accuracy_score(y_test, y_pred_dt))

models = ["Logistic Regression", "Decision Tree"]
accuracies = [
    accuracy_score(y_test, y_pred),
    accuracy_score(y_test, y_pred_dt)
]

plt.bar(models, accuracies, color=['lightgreen','lightblue'])
plt.ylabel("Accuracy")
plt.title("Model Comparison: Logistic Regression vs Decision Tree")
plt.ylim(0,1)
plt.show()